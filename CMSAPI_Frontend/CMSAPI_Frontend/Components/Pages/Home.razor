@page "/"
@using System.Text.Json
@using System.Text.Json.Serialization
@using System.Net.Http.Headers
@using CMSAPI_Frontend.Data.Models
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@rendermode InteractiveServer
@inject IHttpClientFactory ClientFactory
@inject HttpClient Http
@inject IJSRuntime JSRuntime
@inject NavigationManager NavManager


<PageTitle>@currentFolder.Name</PageTitle>

<h1>@currentFolder.Name</h1>
<h2>@currentFolder.Url</h2>
@if (openNewFolder)
{
    <div>
        <form>
            <label for="newFolderName">new folder name:</label>
            <input type="text" id="newFolderName" class="form-control" @bind="newFolder.Name" required />
            <br />

            <button class="btn btn-primary" type="submit" @onclick="AddFolder" @onclick:preventDefault="true">Add Folder</button>
        </form>
    </div>
}
<div>
    <button>New Document</button><button @onclick="OpenNewFolder">New Folder</button>
</div>

@if (childFolders.Count > 0)
{
    @foreach (var folder in childFolders)
    {
        <div>
            <button style="background-color: transparent; border: none; color: rebeccapurple;" class="childFolderButton" @onclick="()=>NavigateToFolder(folder)">
                @folder.Name
            </button>
            <button>
                TODO:EDIT
            </button>
            <button>
                TODO: DELETE
            </button>
        </div>
    }

}

@if (childDocuments.Count > 0)
{
    @foreach (var document in childDocuments)
    {
        <div>
            <button style="background-color: transparent; border: none; color: rebeccapurple;" class="childFolderButton" >
                @document.Title
            </button>
            <button>
                TODO:EDIT
            </button>
            <button>
                TODO: DELETE
            </button>
        </div>
    }

}

@if (childDocuments.Count > 0)
{
    @foreach (var document in childDocuments)
    {
        <div><p>@document.Title</p></div>
    }
}




@code {
    public Boolean openNewFolder = false;
    private readonly CreateFolderDto newFolder = new();
    public string? userToken;
    public string? responseBody;
    private List<NavigatableFolderDto> childFolders = new();
    private List<DocumentDto> childDocuments = new();
    private NavigatableFolderDto currentFolder = new() { Name = "Root" };


    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            userToken = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "key");


            if (userToken == null)
            {
                NavManager.NavigateTo("/login");
            }

            if (userToken != null)
            {

                var deserializedResponse = await GetFolders();

                Console.WriteLine(deserializedResponse[0].Name);

                UpdateCurrentFolder(deserializedResponse, "/Root");


                var client = ClientFactory.CreateClient();

            }

        }


    }

    private async Task<List<NavigatableFolderDto>> GetFolders()
    {
        var requestMessage = new HttpRequestMessage()
            {
                Method = new HttpMethod("GET"),
                RequestUri = new Uri("https://localhost:7225/api/Folder")
            };
        //new LoginDto { Password = "Bobby123!", Email = "bob@bobs.com" }

        requestMessage.Headers.Authorization = new AuthenticationHeaderValue("Bearer", userToken);

        var response = await Http.SendAsync(requestMessage);

        if (response.StatusCode == System.Net.HttpStatusCode.Unauthorized)
        {
            NavManager.NavigateTo("/login");
        }

        if (!response.IsSuccessStatusCode)
        {
            NavManager.NavigateTo("/Error");
        }

        responseBody = await response.Content.ReadAsStringAsync();
        //Console.WriteLine(responseBody);

        //var deserializedResponse = JsonSerializer.Deserialize<NavigatableFolderDto>(responseBody, new JsonSerializerOptions { PropertyNameCaseInsensitive = true });

        var deserializedResponse = JsonSerializer.Deserialize<List<NavigatableFolderDto>>(responseBody, new JsonSerializerOptions { PropertyNameCaseInsensitive = true });

        return deserializedResponse;
    }

    private void OpenNewFolder()
    {
        openNewFolder = true;
    }

    private void CloseNewFolder()
    {
        openNewFolder = false;
    }

    private async Task AddFolder()
    {
        if (newFolder.Name == null || newFolder.Name == "" || newFolder.Name.ToLower() == "root")
        {
            Console.WriteLine("CannotMakeFolder");

        }
        else
        {

            newFolder.ParentFolderId = currentFolder.Id;

            var requestMessage = new HttpRequestMessage()
                {
                    Method = new HttpMethod("POST"),
                    RequestUri = new Uri("https://localhost:7225/api/Folder"),
                    Content = JsonContent.Create(newFolder)
                };


            requestMessage.Headers.Authorization = new AuthenticationHeaderValue("Bearer", userToken);
            var response = await Http.SendAsync(requestMessage);

            if (response.IsSuccessStatusCode)
            {

                var folders = await GetFolders();

                UpdateCurrentFolder(folders, currentFolder.Url);


            }
        }

        CloseNewFolder();


    }

    private async Task NavigateToFolder(NavigatableFolderDto selectedFolder){
        var folders = await GetFolders();
        currentFolder = selectedFolder;

        UpdateCurrentFolder(folders, currentFolder.Url);

    }


    private void UpdateCurrentFolder(List<NavigatableFolderDto> folders, string url)
    {
        currentFolder = folders.First(f => f.Url== url);

        if (currentFolder.Documents.Count > 0)
        {
            childDocuments.Clear();
            foreach (var document in currentFolder.Documents)
            {
                childDocuments.Add(document);
            }
        }

        if (folders != null)
        {
            childFolders.Clear();
            foreach (var folder in folders)
            {
                if (folder.ParentFolder != null && folder.ParentFolder.Id == currentFolder.Id)
                {
                    Console.WriteLine(folder.Name);
                    childFolders.Add(folder);
                }

            }
        }

        StateHasChanged();
    }

    class FolderDto
    {
        public int Id { get; set; }
        public string Name { get; set; } = null!;
        public int? ParentFolderId { get; set; }

    }
    class CreateFolderDto
    {
        public string Name { get; set; } = null!;
        public int ParentFolderId { get; set; }

    }

    public class DocumentDto
    {
        public int Id { get; set; }
        public string? Title { get; set; }
        public string? Content { get; set; }
        public string? ContentType { get; set; }
        public DateTime CreatedDate { get; set; }
        public string? IdentityUserId { get; set; }
        public int? FolderId { get; set; }
        public string? FolderName { get; set; }
    }

    class NavigatableFolderDto
    {
        public int Id { get; set; }
        public string Name { get; set; } = null!;
        public FolderDto? ParentFolder { get; set; }
        public List<DocumentDto> Documents { get; set; } = null!;
        public string Url { get; set; } = null!;

    }
}